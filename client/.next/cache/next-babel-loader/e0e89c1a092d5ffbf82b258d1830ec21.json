{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nvar _jsxFileName = \"/app/pages/register.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\nconst REGISTER_USER = gql`\n    mutation($email: String!, $password: String!) {\n        createUser(data: { email: $email, password: $password }) {\n            id\n            email\n        }\n    }\n`;\n\nconst Register = () => {\n  const [registerUser, {\n    data\n  }] = useMutation(REGISTER_USER);\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: ({\n      email,\n      password\n    }) => {\n      registerUser({\n        variables: {\n          email,\n          password\n        }\n      }).then(({\n        data: {\n          createUser\n        }\n      }) => {\n        console.log(createUser);\n      }).catch(errorResponse => {\n        console.log({\n          gqlErrs: errorResponse.graphQLErrors\n        });\n\n        if (errorResponse.message.includes(\"duplicate key error\")) {\n          console.error(\"User Already Exists\");\n        } else if (errorResponse.graphQLErrors[0].extensions.constraints) {\n          _Object$values(errorResponse.graphQLErrors[0].extensions.constraints);\n        }\n      });\n    }\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Email address\", __jsx(\"input\", {\n    name: \"email\",\n    id: \"email\",\n    type: \"email\",\n    onChange: formik.handleChange,\n    value: formik.values.email,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Email address\", __jsx(\"input\", {\n    name: \"password\",\n    id: \"password\",\n    type: \"password\",\n    onChange: formik.handleChange,\n    value: formik.values.password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"SignUp\")));\n};\n\nexport default Register;","map":{"version":3,"sources":["/app/pages/register.tsx"],"names":["React","useFormik","gql","useMutation","REGISTER_USER","Register","registerUser","data","formik","initialValues","email","password","onSubmit","variables","then","createUser","console","log","catch","errorResponse","gqlErrs","graphQLErrors","message","includes","error","extensions","constraints","handleSubmit","handleChange","values"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAGA,MAAMC,aAAa,GAAGF,GAAI;;;;;;;CAA1B;;AASA,MAAMG,QAAQ,GAAG,MAAM;AACnB,QAAM,CAAEC,YAAF,EAAgB;AAAEC,IAAAA;AAAF,GAAhB,IAA6BJ,WAAW,CAACC,aAAD,CAA9C;AACA,QAAMI,MAAM,GAAGP,SAAS,CAAC;AACrBQ,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KADM;AAKrBC,IAAAA,QAAQ,EAAE,CAAC;AAAEF,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,KAAyB;AAC/BL,MAAAA,YAAY,CAAC;AACTO,QAAAA,SAAS,EAAE;AACPH,UAAAA,KADO;AAEPC,UAAAA;AAFO;AADF,OAAD,CAAZ,CAMKG,IANL,CAMU,CAAC;AAAEP,QAAAA,IAAI,EAAE;AAAEQ,UAAAA;AAAF;AAAR,OAAD,KAA8B;AAChCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH,OARL,EASKG,KATL,CASYC,aAAD,IAAmB;AACtBH,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEG,UAAAA,OAAO,EAAED,aAAa,CAACE;AAAzB,SAAZ;;AACA,YAAIF,aAAa,CAACG,OAAd,CAAsBC,QAAtB,CAA+B,qBAA/B,CAAJ,EAA2D;AACvDP,UAAAA,OAAO,CAACQ,KAAR,CAAc,qBAAd;AACH,SAFD,MAEO,IAAIL,aAAa,CAACE,aAAd,CAA4B,CAA5B,EAA+BI,UAA/B,CAA0CC,WAA9C,EAA2D;AAC9D,yBAAcP,aAAa,CAACE,aAAd,CAA4B,CAA5B,EAA+BI,UAA/B,CAA0CC,WAAxD;AACH;AACJ,OAhBL;AAiBH;AAvBoB,GAAD,CAAxB;AA0BA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,QAAQ,EAAElB,MAAM,CAACmB,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,EAAE,EAAC,OAFP;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,QAAQ,EAAEnB,MAAM,CAACoB,YAJrB;AAKI,IAAA,KAAK,EAAEpB,MAAM,CAACqB,MAAP,CAAcnB,KALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAWI;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,EAAE,EAAC,UAFP;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,QAAQ,EAAEF,MAAM,CAACoB,YAJrB;AAKI,IAAA,KAAK,EAAEpB,MAAM,CAACqB,MAAP,CAAclB,QALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAXJ,EAqBI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBJ,CADJ,CADJ;AA2BH,CAvDD;;AAyDA,eAAeN,QAAf","sourcesContent":["import React from \"react\";\nimport { useFormik } from \"formik\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { GraphQLError } from \"graphql\";\n\nconst REGISTER_USER = gql`\n    mutation($email: String!, $password: String!) {\n        createUser(data: { email: $email, password: $password }) {\n            id\n            email\n        }\n    }\n`;\n\nconst Register = () => {\n    const [ registerUser, { data } ] = useMutation(REGISTER_USER);\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            password: \"\",\n        },\n        onSubmit: ({ email, password }) => {\n            registerUser({\n                variables: {\n                    email,\n                    password,\n                },\n            })\n                .then(({ data: { createUser } }) => {\n                    console.log(createUser);\n                })\n                .catch((errorResponse) => {\n                    console.log({ gqlErrs: errorResponse.graphQLErrors });\n                    if (errorResponse.message.includes(\"duplicate key error\")) {\n                        console.error(\"User Already Exists\");\n                    } else if (errorResponse.graphQLErrors[0].extensions.constraints) {\n                        Object.values(errorResponse.graphQLErrors[0].extensions.constraints)\n                    }\n                });\n        },\n    });\n\n    return (\n        <div>\n            <form onSubmit={formik.handleSubmit}>\n                <label htmlFor=\"email\">\n                    Email address\n                    <input\n                        name=\"email\"\n                        id=\"email\"\n                        type=\"email\"\n                        onChange={formik.handleChange}\n                        value={formik.values.email}\n                    />\n                </label>\n                <label htmlFor=\"password\">\n                    Email address\n                    <input\n                        name=\"password\"\n                        id=\"password\"\n                        type=\"password\"\n                        onChange={formik.handleChange}\n                        value={formik.values.password}\n                    />\n                </label>\n                <button type=\"submit\">SignUp</button>\n            </form>\n        </div>\n    );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}