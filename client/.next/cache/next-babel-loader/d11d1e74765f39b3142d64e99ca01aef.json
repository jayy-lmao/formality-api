{"ast":null,"code":"var _jsxFileName = \"/app/pages/register.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\nconst REGISTER_USER = gql`\n    mutation($email: String!, $password: String!) {\n        createUser(data: { email: $email, password: $password }) {\n            id\n            email\n        }\n    }\n`;\n\nconst Register = () => {\n  const [registerUser, {\n    data\n  }] = useMutation(REGISTER_USER);\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: async ({\n      email,\n      password\n    }) => {\n      const response = await registerUser({\n        variables: {\n          email,\n          password\n        }\n      }).catch(errorResponse => {\n        console.log({\n          name: errorResponse.name,\n          message: errorResponse.message\n        }); // if (errorResponse.includes('duplicate key error')){\n        //     console.error('User Already Exists')\n        // }\n      });\n      console.log(response); // const { errors } = response;\n      // if (errors) {\n      //     console.error(errors);\n      // } else {\n      //     console.table(response.data);\n      // }\n    }\n  });\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Email address\", __jsx(\"input\", {\n    name: \"email\",\n    id: \"email\",\n    type: \"email\",\n    onChange: formik.handleChange,\n    value: formik.values.email,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Email address\", __jsx(\"input\", {\n    name: \"password\",\n    id: \"password\",\n    type: \"password\",\n    onChange: formik.handleChange,\n    value: formik.values.password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"SignUp\")));\n};\n\nexport default Register;","map":{"version":3,"sources":["/app/pages/register.tsx"],"names":["React","useFormik","gql","useMutation","REGISTER_USER","Register","registerUser","data","formik","initialValues","email","password","onSubmit","response","variables","catch","errorResponse","console","log","name","message","handleSubmit","handleChange","values"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA,MAAMC,aAAa,GAAGF,GAAI;;;;;;;CAA1B;;AASA,MAAMG,QAAQ,GAAG,MAAM;AACnB,QAAM,CAAEC,YAAF,EAAgB;AAAEC,IAAAA;AAAF,GAAhB,IAA6BJ,WAAW,CAACC,aAAD,CAA9C;AACA,QAAMI,MAAM,GAAGP,SAAS,CAAC;AACrBQ,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KADM;AAKrBC,IAAAA,QAAQ,EAAE,OAAO;AAAEF,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAP,KAA+B;AACrC,YAAME,QAAQ,GAAG,MAAMP,YAAY,CAAC;AAChCQ,QAAAA,SAAS,EAAE;AACPJ,UAAAA,KADO;AAEPC,UAAAA;AAFO;AADqB,OAAD,CAAZ,CAKpBI,KALoB,CAKbC,aAAD,IAA0B;AAC/BC,QAAAA,OAAO,CAACC,GAAR,CAAY;AAACC,UAAAA,IAAI,EAAEH,aAAa,CAACG,IAArB;AAA2BC,UAAAA,OAAO,EAAEJ,aAAa,CAACI;AAAlD,SAAZ,EAD+B,CAE/B;AACA;AACA;AACH,OAVsB,CAAvB;AAWAH,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ,EAZqC,CAarC;AACA;AACA;AACA;AACA;AACA;AACH;AAxBoB,GAAD,CAAxB;AA2BA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,QAAQ,EAAEL,MAAM,CAACa,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,EAAE,EAAC,OAFP;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,QAAQ,EAAEb,MAAM,CAACc,YAJrB;AAKI,IAAA,KAAK,EAAEd,MAAM,CAACe,MAAP,CAAcb,KALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAWI;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEI;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,EAAE,EAAC,UAFP;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,QAAQ,EAAEF,MAAM,CAACc,YAJrB;AAKI,IAAA,KAAK,EAAEd,MAAM,CAACe,MAAP,CAAcZ,QALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAXJ,EAqBI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBJ,CADJ,CADJ;AA2BH,CAxDD;;AA0DA,eAAeN,QAAf","sourcesContent":["import React from \"react\";\nimport { useFormik } from \"formik\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nconst REGISTER_USER = gql`\n    mutation($email: String!, $password: String!) {\n        createUser(data: { email: $email, password: $password }) {\n            id\n            email\n        }\n    }\n`;\n\nconst Register = () => {\n    const [ registerUser, { data } ] = useMutation(REGISTER_USER);\n    const formik = useFormik({\n        initialValues: {\n            email: \"\",\n            password: \"\",\n        },\n        onSubmit: async ({ email, password }) => {\n            const response = await registerUser({\n                variables: {\n                    email,\n                    password,\n                },\n            }).catch((errorResponse: Error) => {\n                console.log({name: errorResponse.name, message: errorResponse.message})\n                // if (errorResponse.includes('duplicate key error')){\n                //     console.error('User Already Exists')\n                // }\n            });\n            console.log(response);\n            // const { errors } = response;\n            // if (errors) {\n            //     console.error(errors);\n            // } else {\n            //     console.table(response.data);\n            // }\n        },\n    });\n\n    return (\n        <div>\n            <form onSubmit={formik.handleSubmit}>\n                <label htmlFor=\"email\">\n                    Email address\n                    <input\n                        name=\"email\"\n                        id=\"email\"\n                        type=\"email\"\n                        onChange={formik.handleChange}\n                        value={formik.values.email}\n                    />\n                </label>\n                <label htmlFor=\"password\">\n                    Email address\n                    <input\n                        name=\"password\"\n                        id=\"password\"\n                        type=\"password\"\n                        onChange={formik.handleChange}\n                        value={formik.values.password}\n                    />\n                </label>\n                <button type=\"submit\">SignUp</button>\n            </form>\n        </div>\n    );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}